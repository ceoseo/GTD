datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
  // shadowDatabaseUrl = env("SHADOW_DATABASE_URL") // Only needed when using a cloud provider that doesn't support the creation of new databases, like Heroku. Learn more: https://pris.ly/d/migrate-shadow
}

generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["fullTextSearch"]
}

model Account {
  id                String   @id @default(uuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?  @db.Text
  access_token      String?  @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?  @db.Text
  session_state     String?
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(uuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
}

model User {
  id            String       @id @default(uuid())
  name          String?
  email         String?      @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]
  Goal          Goal[]
  Project       Project[]
  Task          Task[]
  Context       Context[]
  createdAt     DateTime     @default(now())
  updatedAt     DateTime     @updatedAt
  kpis          Kpi[]
  experiments   Experiment[]
  notes         Note[]
  boards        Board[]
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

enum GoalStatus {
  NOT_STARTED
  IN_PROGRESS
  ON_HOLD
  COMPLETED
  CANCELLED
}

model Goal {
  id         String     @id @default(uuid())
  status     GoalStatus
  progress   Int
  title      String
  content    String
  userId     String
  dueDate    DateTime?
  user       User       @relation(fields: [userId], references: [id])
  createdAt  DateTime   @default(now())
  updatedAt  DateTime   @updatedAt
  motivation String?
  isDeleted  Boolean    @default(false)

  projects Project[]
  tasks    Task[]
}

model Note {
  id        String   @id @default(uuid())
  title     String
  content   String
  userId    String
  user      User     @relation(fields: [userId], references: [id])
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  project   Project? @relation(fields: [projectId], references: [id])
  projectId String?
}

model Project {
  id                  String       @id @default(uuid())
  title               String
  content             String
  dueDate             DateTime?
  color               String?
  completed           Boolean      @default(false)
  status              GoalStatus?
  userId              String
  user                User         @relation(fields: [userId], references: [id])
  tasks               Task[]
  goal                Goal?        @relation(fields: [goalId], references: [id])
  goalId              String?
  createdAt           DateTime     @default(now())
  updatedAt           DateTime     @updatedAt
  lastReview          DateTime?
  reviewFrequencyDays Int?
  isDeleted           Boolean      @default(false)
  kpis                Kpi[]
  experiments         Experiment[]
  notes               Note[]
}

model Task {
  id          String       @id @default(uuid())
  title       String
  content     Json
  dueDate     DateTime?
  completed   Boolean      @default(false)
  userId      String
  user        User         @relation(fields: [userId], references: [id])
  projectId   String?
  project     Project?     @relation(fields: [projectId], references: [id])
  contexts    Context[]
  goal        Goal?        @relation(fields: [goalId], references: [id])
  goalId      String?
  status      Status
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt
  completedAt DateTime?
  taskColumns TaskColumn[]
}

model TaskColumn {
  id        String   @id @default(uuid())
  taskId    String
  task      Task     @relation(fields: [taskId], references: [id])
  columnId  String
  column    Column   @relation(fields: [columnId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  order     Int

  @@unique([taskId, columnId])
}

enum Status {
  INBOX
  NEXT_ACTION
  WAITING_FOR
  SOMEDAY_MAYBE
  CALENDAR
  REFERENCE
  REVIEW
  ARCHIVE

  @@map("StatusEnum")
}

model Context {
  id        String   @id @default(uuid())
  title     String
  color     String?
  userId    String
  user      User     @relation(fields: [userId], references: [id])
  tasks     Task[]
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Kpi {
  id          String       @id @default(uuid())
  title       String
  description String?
  userId      String
  user        User         @relation(fields: [userId], references: [id])
  projectId   String?
  project     Project?     @relation(fields: [projectId], references: [id])
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt
  isDeleted   Boolean      @default(false)
  entries     KpiEntry[]
  experiments Experiment[]
  targets     KpiTarget[]
}

model KpiTarget {
  id        String  @id @default(uuid())
  value     Float
  kpiId     String
  isDeleted Boolean @default(false)

  kpi       Kpi      @relation(fields: [kpiId], references: [id])
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now())

  targetDate DateTime
}

model KpiEntry {
  id        String   @id @default(uuid())
  date      DateTime
  value     Float
  kpiId     String
  isDeleted Boolean  @default(false)

  kpi       Kpi      @relation(fields: [kpiId], references: [id])
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now())
}

model Experiment {
  id        String    @id @default(uuid())
  title     String
  thesis    String
  goal      String
  test      String
  userId    String
  user      User      @relation(fields: [userId], references: [id])
  projectId String?
  project   Project?  @relation(fields: [projectId], references: [id])
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  startDate DateTime?
  endDate   DateTime?
  kpiId     String?
  kpi       Kpi?      @relation(fields: [kpiId], references: [id])
}

model Board {
  id        String    @id @default(uuid())
  title     String
  userId    String
  user      User      @relation(fields: [userId], references: [id])
  columns   Column[]
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  deletedAt DateTime?
}

model Column {
  id        String       @id @default(uuid())
  title     String
  boardId   String
  board     Board        @relation(fields: [boardId], references: [id])
  tasks     TaskColumn[]
  order     Int
  createdAt DateTime     @default(now())
  updatedAt DateTime     @updatedAt
  color     String?
}
