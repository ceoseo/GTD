datasource db {
  provider          = "postgresql"
  url               = env("DATABASE_URL")
  shadowDatabaseUrl = env("SHADOW_DATABASE_URL") // Only needed when using a cloud provider that doesn't support the creation of new databases, like Heroku. Learn more: https://pris.ly/d/migrate-shadow
}

generator client {
  provider = "prisma-client-js"
}

model Account {
  id                String   @id @default(uuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?  @db.Text
  access_token      String?  @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?  @db.Text
  session_state     String?
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(uuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
}

model User {
  id            String    @id @default(uuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]
  Goal          Goal[]
  Project       Project[]
  Task          Task[]
  Context       Context[]
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Goal {
  id        String   @id @default(uuid())
  title     String
  content   String
  userId    String
  user      User     @relation(fields: [userId], references: [id])
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Project {
  id                  String    @id @default(uuid())
  title               String
  content             String
  dueDate             DateTime?
  color               String?
  completed           Boolean   @default(false)
  userId              String
  user                User      @relation(fields: [userId], references: [id])
  tasks               Task[]
  createdAt           DateTime  @default(now())
  updatedAt           DateTime  @updatedAt
  lastReview          DateTime?
  reviewFrequencyDays Int?
}

model Task {
  id        String       @id @default(uuid())
  title     String
  content   String
  dueDate   DateTime?
  completed Boolean      @default(false)
  userId    String
  user      User         @relation(fields: [userId], references: [id])
  projectId String?
  project   Project?     @relation(fields: [projectId], references: [id])
  contexts  Context[]
  category  CategoryEnum
  createdAt DateTime     @default(now())
  updatedAt DateTime     @updatedAt
}

enum CategoryEnum {
  INBOX
  NEXT_ACTION
  WAITING_FOR
  SOMEDAY_MAYBE
  CALENDAR
  REFERENCE
  REVIEW
}

model Context {
  id        String   @id @default(uuid())
  title     String
  color     String?
  userId    String
  user      User     @relation(fields: [userId], references: [id])
  tasks     Task[]
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}
